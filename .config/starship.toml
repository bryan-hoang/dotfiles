# ~/.config/starship.toml

format = """
$username\
$hostname\
$localip\
$shlvl\
$singularity\
$kubernetes\
$directory\
$vcsh\
${custom.git_url}\
$git_branch\
$git_commit\
$git_state\
$git_metrics\
$git_status\
${custom.git_scope}\
$hg_branch\
$docker_context\
$package\
$c\
$cmake\
$cobol\
$daml\
$dart\
$deno\
$dotnet\
$elixir\
$elm\
$erlang\
$golang\
$guix_shell\
$haskell\
$haxe\
$helm\
$java\
$julia\
$kotlin\
$lua\
$nim\
$nodejs\
${custom.npm}\
$ocaml\
$opa\
$perl\
$php\
$pulumi\
$purescript\
$python\
$raku\
$rlang\
$red\
$ruby\
$rust\
$scala\
$swift\
$terraform\
$vlang\
$vagrant\
$zig\
$buf\
$nix_shell\
$conda\
$meson\
$spack\
$memory_usage\
$aws\
$gcloud\
$openstack\
$azure\
$env_var\
$crystal\
$custom\
$sudo\
$cmd_duration\
$jobs\
$battery\
$time\
$status\
$os\
$container\
$shell\
$line_break\
$character"""

add_newline = true
command_timeout = 500
continuation_prompt = '[>](bright-black) '
scan_timeout = 30

[character]
error_symbol = '[\$](bold red)'
success_symbol = '[\$](bold green)'

[cmd_duration]
min_time = 2_000
show_notifications = true
format = '[$duration]($style) '

[directory]
format = "[$path]($style)[$read_only]($read_only_style) "

[deno]
format = '[$symbol($version )]($style)'
version_format = 'v${major}.${minor}'

[gcloud]
# The module isn't very useful :(
disabled = true

[git_branch]
format = "[$symbol$branch(:$remote_branch)]($style) "

[hostname]
format = "[$ssh_symbol$hostname]($style):"
ssh_symbol = ""
trim_at = ""

[lua]
format = '[$symbol($version )]($style)'

[memory_usage]
disabled = false
format = '$symbol[${ram}( | ${swap})]($style) '

[nodejs]
format = '[$symbol($version )]($style)'
version_format = "v${major}"

[os]
disabled = true

[package]
format = '[$symbol$version]($style) '

[python]
format = '[${symbol}${pyenv_prefix}(${version} )(\($virtualenv\) )]($style)'
python_binary = ["python3", "python", "python2"]
version_format = "v${major}.${minor}"

[ruby]
format ="[$symbol($version )]($style)"

[rust]
format = '[$symbol($version )]($style)'
version_format = 'v${major}.${minor}'

[shell]
disabled = false

[shlvl]
disabled = false

[status]
disabled = false
map_symbol = true
pipestatus = true
pipestatus_format = '\[$pipestatus\] => [$symbol$common_meaning$signal_name$maybe_int ]($style)'
pipestatus_segment_format = '[$symbol$status]($style)'

[sudo]
disabled = false
format = "[$symbol]($style)"

[time]
disabled = true

[username]
format = "[$user]($style)@"

# To help switch between npm versions when it matters -_-
[custom.npm]
command = "npm --version | awk -F '.' '{print \"v\"$1}'"
format = '[$symbol($output )]($style)'
description = "The currently installed version of NPM"
style = "bold red"
detect_files = ['package-lock.json']
symbol = ' '

[custom.pnpm]
command = "pnpm --version | awk -F '.' '{print \"v\"$1}'"
format = '[$symbol($output )]($style)'
description = "The currently installed version of PNPM"
style = "bold yellow"
detect_files = ['pnpm-lock.yaml']
symbol = 'p '

[custom.git_url]
command = "check-git-remote"
description = "Display symbol for remote Git server"
format = "[$output]($style) "
# Don't run in dotfiles repo.
os = "unix"
shell = ["bash", "--noprofile", "--norc"]
style = "white"
when = "git rev-parse --is-inside-work-tree 2>/dev/null"

[custom.git_scope]
command = 'git config user.email'
description = 'The currently configured Git user.email'
format = '[<$output>]($style) '
style = 'blue'
when = 'git rev-parse --is-inside-work-tree'

[custom.direnv]
disabled = true
command = "echo 'direnv'"
description = "The fact that direnv is being used"
format = "using [$output]($style) "
style = "purple"
when = "[[ -n \"${DIRENV_DIR}\" ]]"
