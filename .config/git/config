[user]
	name = Bryan Hoang
	email = bryan@bryanhoang.dev
	useConfigOnly = true
	signingKey = bryan@bryanhoang.dev
[include]
	# Machine specific configuration. e.g., Different user.name/user.email based
	# on current project.
	path = src.gitconfig
	# Include Dracula colors.
	path = ~/src/github.com/dracula/git/config/gitconfig
[includeIf "gitdir:~/.git"]
	path = dotfiles.gitconfig
[alias]
	# Delete branches that are merged into the current branch.
	dm = "!git branch --format '%(refname:short)' --merged | grep --invert-match $(git branch --show-current) | xargs --no-run-if-empty git branch --delete"
	# View abbreviated SHA, description, and history graph of the latest 20
	# commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format.
	s = status -s
	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	ds = !"git diff --staged"
	# Clone a repository including all submodules.
	# Commit all changes.
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2>/dev/null || git checkout \"$1\"; }; f"
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose
	# Amend the currently staged files to the latest commit.
	amend = commit --amend --no-edit
	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find the branch that a commit came from.
	#
	# https://stackoverflow.com/a/57562208
	find-branch = name-rev --name-only --exclude=tags/*
	# List contributors with number of commits.
	contributors = shortlog --summary --numbered --no-merges --email
	# Find and replace text in the entire git repo
	fr = "!gr() { git grep -l "$1" | xargs sed -i '' -e "s/$1/$2/g" 2>/dev/null; }; gr"
	sub-branch = "!git submodule foreach --recursive 'git switch "$(basename $(git symbolic-ref --short refs/remotes/origin/HEAD))"; git pull'"
	# Usage: git mr <id> [target branch]
	# $ git review-mr 1337
	# Switchs to the merge base with the overall changes as hunks.
	review-mr = "!f() { git fetch origin refs/merge-requests/$1/head && git switch --detach FETCH_HEAD && git reset $(git merge-base HEAD ${2:-$(git branch-default)}); }; f"
	# Find the date a file was added. Source: https://stackoverflow.com/a/25633731/8714233
	fd = "!f() { git log --follow --format=%ad $1 | tail -1; }; f"
	# Make local index and working tree match remote.
	#
	# Source: https://stackoverflow.com/a/9753364/8714233
	reset-remote = !git fetch origin && git reset --hard "$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')" && git clean -fd
	# <Commit before merge commit to rebase onto> <Merge commit before range of commits to rebase>
	# <Current branch to end range of commits to rebase>
	rebase-merge = "!f() { git rebase --onto $(git rev-list --max-count 1 HEAD@{1}) $(git rev-list --merges --max-count=1 HEAD) $(git branch --show-current); }; f"
	# Print the current default branch on the remote.
	branch-default = "!f() { git rev-parse --abbrev-ref origin | sed 's/origin\\///'; }; f"
	# https://stackoverflow.com/questions/65837109/when-should-i-use-git-push-force-if-includes
	push-force-safely = push --force-with-lease --force-if-includes
	# https://stackoverflow.com/a/54408181/8714233
	wt-fix-refs = "!git for-each-ref --format='%(refname:short)' refs/heads | xargs git branch -D 2>/dev/null || true"
	switch-time = "!f() { git switch -d $(git rev-list -n 1 --first-parent --before \"$1 23:59\" $(git branch-default)) ; }; f"
	# Delete a branch locally and on the remote.
	branch-delete = "!f() { git branch --delete --force $1 || true && git push origin --delete $1; }; f"
	# List branches with most recent committer to it. Useful for finding which
	# branch someone has been committing to recently.
	branch-activity = "branch --remotes --format='%(authordate:short) %(color:yellow)%(refname:lstrip=3)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset)) %(color:blue)%(authorname)%(color:reset)' --no-merged origin/HEAD"
	# Prints the name of the upstream branch.
	show-upstream-ref = rev-parse --abbrev-ref HEAD@{u}
	# https://stackoverflow.com/a/27940027/8714233
	diff-changes = "!f() { git merge-base origin/$(git branch-default) $(git branch --show-current) | xargs -I '{}' git diff '{}'..$(git branch --show-current) "$@" 2>/dev/null; }; f"
	# Logs the diff of commits between the default branch and the current branch.
	log-changes = "!f() { git log --oneline --graph \"$@\" origin/$(git branch-default)..$(git branch --show-current); }; f"
	# Logs commits that haven't been pushed to a remote yet.
	log-local = "!f() { git log --oneline --decorate=no $(git show-upstream-ref)..HEAD \"$@\"; }; f"
	# Diffs the current branch against the remote branch of the same name.
	diff-local = "!f() { git diff $(git show-upstream-ref)..HEAD \"$@\"; }; f"
	# Takes a file path as an argument. Prints the date the file was first added
	# to the repository.
	log-added-date = "log --format='format:%ci' --name-status --diff-filter=A --follow"
	# Opens all modified, untracked, and staged files in the editor of choice.
	# Respects the current working directory. Source:
	# https://stackoverflow.com/a/32231077/8714233
	edit = !"$EDITOR $(git status --short | awk '$1 ~ /^M|A|U|\\?\\?/ {print $2}');"
	# Logs dangling commits, helpfulin recovering lost states.
	# https://stackoverflow.com/a/91795/8714233
	log-dangling = "!f() { git log --oneline --graph "$@" $(git fsck --no-reflog | awk '/dangling commit/ {print $3}'); }; f"
	# Print the latest tag across all branches.
	tag-latest = "!git describe --tags $(git rev-list --tags --max-count=1)"
	# Converts normally cloned repo into one that better accommodates a "git
	# worktree" based workflow.
	worktree-convert = "!f() { grm wt convert; mv .git-main-working-tree .git; git worktree add \"$(git branch-default)\"; git worktree lock \"$(git branch-default)\"; }; f"
[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix
[branch]
	# Show most recently changed branches first.
	sort = -committerdate
# Config for `git bulk` from `git-extras`.`
[bulkworkspaces]
[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true
	template = ~/.config/git/COMMIT_EDITMSG
[core]
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	autocrlf = input
	eol = lf
	symlinks = true
	fsmonitor = true
	hooksPath = hooks
	pager = delta
[interactive]
	diffFilter = delta --color-only
[include]
	path = ~/src/github.com/dandavison/delta/themes.gitconfig
[delta]
	navigate = true
	syntax-theme = Dracula
	side-by-side = true
	tabs = 2
	features = decorations zebra-dark
[delta "decorations"]
	hunk-header-style = file line-number syntax
[diff]
	# Detect copies as well as renames.
	renames = copies
	# If set, 'git diff' uses a prefix pair that is different from the standard
	# "a/" and "b/" depending on what is being compared. When this configuration
	# is in effect, reverse diff output also swaps the order of the prefixes:
	mnemonicPrefix = true
	algorithm = histogram
	colormoved = default
	orderFile = ~/.config/git/order
	colorMovedWS = allow-indentation-change
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[filter "npmrc"]
	smudge = cat
	clean = "sed '/_authToken/d'"
[filter "gpg-agent"]
	# The command which is used to convert the content of a worktree file to a blob upon checkin. See
	# gitattributes[5] for details.
	#
	# Filter out pinentry program on WSL 2 on windows in VS Code
	smudge = cat
	clean = "sed '/pinentry./d'"
[filter "spotify-tui"]
	smudge = cat
	clean = "sed '/^client_secret/d;/device_id/d'"
[filter "streamlink-crunchyroll"]
	smudge = cat
	clean = "sed '/^crunchyroll-password=/d'"
[filter "i3status-rust-token"]
	smudge = cat
	clean = "sed '/^token/d'"
[filter "xresources-dpi"]
	smudge = cat
	clean = "sed '/^Xft.dpi/d'"
[filter "git-config"]
	smudge = cat
	# Using sed to delete all lines between two matching patterns:
	# https://stackoverflow.com/a/6287940/8714233
	clean = "sed -e '/\\[gpg\\]/d' -e '/^	program = /d' -e '/^\\[bulkworkspaces\\]/,/^\\[/{/^\\[bulkworkspaces\\]/!{/\\[/!d}}'"
[filter "macchina"]
	smudge = cat
	clean = "sed '/^interface =/d'"
[filter "mise"]
	smudge = cat
	clean = "sed -E -e '/^\\[tools\\]/,/^\\[/{/^\\[tools\\]/!{/\\[/!d}}' -e '/^\\[env\\]/,/^\\[/{/^\\[env\\]/!{/\\[/!d}}' -e '/^\\[alias\\]/,/^\\[env/{/^\\[alias\\]/!{/\\[env/!d}}'"
[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 0
[init]
	# Allows overriding the default branch name e.g. when initializing a new
	# repository.
	defaultBranch = main
[log]
	abbrevCommit = true
	date = iso
	follow = true
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	tool = nvimdiff
	conflictStyle = zdiff3
	ff = only
	strategy = ort
	renormalize = true
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = current
	autoSetupRemote = true
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	recurseSubmodules = check
[status]
	showStash = true
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[pull]
	rebase = true
[fetch]
	prune = true
	pruneTags = true
	parallel = 0
[submodule]
	recurse = true
	fetchJobs = 0
[pack]
	writeReverseIndex = true
[maintenance]
	strategy = incremental
[grep]
	# If set to true, enable -n option by default.
	lineNumber = true
	# If set to true, enable the --column option by default.
	column = true
[tag]
	gpgsign = true
	# A boolean to specify whether annotated tags created should be GPG signed.
	# If --annotate is specified on the command line, it takes precedence over
	# this option.
	forceSignAnnotated = true
[advice]
	# Advice shown if a user attempts to add an ignored file to the index.
	addIgnoredFile = false
	addEmptyPathspec = false
	statusHints = false
[credential]
	helper = cache
[column]
	branch = auto
[color "grep"]
	match = green bold reverse
	column = white
[color "status"]
	changed = green
	added = yellow
	untracked = cyan
[feature]
	manyFiles = true
	experimental = true
[rerere]
	enabled = true
	autoupdate = true
[rebase]
	stat = true
	autosquash = true
	missingCommitsCheck = error
	abbreviateCommands = true
	autoStash = true
	updateRefs = true
[mergetool]
	writeToTemp = true
	prompt = true
	keepBackup = false
[checkout]
	defaultRemote = origin
[worktree]
	guessRemote = true
[format]
	signOff = true
	pretty = fuller
[index]
	skipHash = false
[sendemail]
	annotate = yes
