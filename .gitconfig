[user]
	name = Bryan Hoang
	email = bryan@bryanhoang.dev
	useConfigOnly = true
	signingkey = ABE9B748EEAE9E00
[include]
	path = ~/git/.gitconfig
	path = ~/submodules/dracula-git/config/gitconfig
[includeIf "gitdir:~/.git"]
	path = .config/git/dotfiles.gitconfig
[alias]
	# Delete branches that are merged into the current branch.
	dm = "!git branch --merged | grep --invert-match '\\*' | xargs --no-run-if-empty git branch --delete"
	# View abbreviated SHA, description, and history graph of the latest 20
	# commits.
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# View the current working tree status using the short format.
	s = status -s
	# Show the diff between the latest commit and the current state.
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state.
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	ds = !"git diff --staged"
	# Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules
	# Clone a repository including all submodules.
	# Commit all changes.
	ca = !git add -A && git commit -av
	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose
	# List aliases.
	aliases = "!git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ / | less"
	# Amend the currently staged files to the latest commit.
	amend = commit --amend --no-edit
	# Credit an author on the latest commit.
	credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"
	# Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"
	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"
	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h %Cblue%ad %Creset%s%Cgreen [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
	# List contributors with number of commits.
	contributors = shortlog --summary --numbered
	ignore = "!gi() { curl -sL https://www.toptal.com/developers/gitignore/api/$@; }; gi"
	# Find and replace text in the entire git repo
	fr = "!gr() { git grep -l "$1" | xargs sed -i '' -e "s/$1/$2/g" 2> /dev/null; }; gr"
	get = "!ghq get"
	sub-branch = "!git submodule foreach --recursive 'git switch "$(basename $(git symbolic-ref --short refs/remotes/origin/HEAD))"; git pull'"
	# Usage: git mr <remote> <id>
	# $ git mr origin 5
	# This fetches the merge request into a local mr-origin-5 branch and check it out.
	# Find the date a file was added. Source: https://stackoverflow.com/a/25633731/8714233
	fd = "!f() { git log --follow --format=%ad $1 | tail -1; }; f"
	# Sync with remote, overwrite local changes.
	#
	# Source: https://stackoverflow.com/a/9753364/8714233
	sync = !git fetch origin && git reset --hard "$(git rev-parse --abbrev-ref --symbolic-full-name '@{u}')" && git clean -fd
	# <Commit before merge commit to rebase onto> <Merge commit before range of commits to rebase>
	# <Current branch to end range of commits to rebase>
	rebase-merge = "!f() { git rebase --onto $(git rev-list --max-count 1 HEAD@{1}) $(git rev-list --merges --max-count=1 HEAD) $(git branch --show-current); }; f"
	# Print the current default branch on the remote.
	default-branch = "!f() { git rev-parse --abbrev-ref origin/HEAD | sed 's/origin\\///'; }; f"
	pushf = push --force-with-lease --force-if-includes
	wt = worktree
	switch-time = "!f() { git switch -d $(git rev-list -n 1 --first-parent --before \"$1 23:59\" $(git default-branch)) ; }; f"
[apply]
	# Detect whitespace errors when applying a patch.
	whitespace = fix
[branch]
	# Show most recently changed branches first.
	sort = -committerdate
[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true
[core]
	# Use custom `.gitignore` and `.gitattributes`.
	# In addition to .gitattributes (per-directory) and .git/info/attributes, Git
	# looks into this file for attributes (see gitattributes[5]). Path expansions
	# are made the same way as for core.excludesFile. Its default value is
	# $XDG_CONFIG_HOME/git/attributes. If $XDG_CONFIG_HOME is either not set or
	# empty, $HOME/.config/git/attributes is used instead.
	attributesfile = ~/.gitattributes
	# Treat spaces before tabs and all kinds of trailing whitespace as an error.
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS.
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	# Setting this variable to "true" is the same as setting the text attribute
	# to "auto" on all files and core.eol to "crlf". Set to true if you want to
	# have CRLF line endings in your working directory and the repository has LF
	# line endings. This variable can be set to input, in which case no output
	# conversion is performed.
	autocrlf = input
	# Sets the line ending type to use in the working directory for files that
	# are marked as text (either by having the text attribute set, or by having
	# text=auto and Git auto-detecting the contents as text). Alternatives are
	# lf, crlf and native, which uses the platform's native line ending. The
	# default value is native. See gitattributes[5] for more information on
	# end-of-line conversion. Note that this value is ignored if core.autocrlf is
	# set to true or input.
	eol = lf
	# If false, symbolic links are checked out as small plain files that contain
	# the link text. git-update-index[1] and git-add[1] will not change the
	# recorded type to regular file. Useful on filesystems like FAT that do not
	# support symbolic links.
	#
	# The default is true, except git-clone[1] or git-init[1] will probe and set
	# core.symlinks false if appropriate when the repository is created.
	symlinks = true
	# If set to true, enable the built-in file system monitor daemon for
	# this working directory.
	fsmonitor = true
	hooksPath = ~/templates/git/hooks
	pager = delta
[interactive]
	diffFilter = delta --color-only
[delta]
	navigate = true
	syntax-theme = Dracula
	side-by-side = true
	hunk-header-style = file line-number syntax
	tabs = 2
	hyperlinks = false
[diff]
	# Detect copies as well as renames.
	renames = copies
	# Controls which diff tool is used by git-difftool[1]. This variable
	# overrides the value configured in merge.tool. The list below shows the
	# valid built-in values. Any other value is treated as a custom diff tool and
	# requires that a corresponding difftool.<tool>.cmd variable is defined.
	tool = vscode
	# If set, 'git diff' uses a prefix pair that is different from the standard
	# "a/" and "b/" depending on what is being compared. When this configuration
	# is in effect, reverse diff output also swaps the order of the prefixes:
	mnemonicPrefix = true
	# If set to either a valid <mode> or a true value, moved lines in a diff are
	# colored differently
	colorMoved = default
[diff "bin"]
	# Use `hexdump` to diff binary files.
	textconv = hexdump -v -C
[difftool "vscode"]
	cmd = code --wait --diff $LOCAL $REMOTE
[fetch]
	# If true, fetch will automatically behave as if the --prune option was given
	# on the command line. See also remote.<name>.prune and the PRUNING section
	# of git-fetch[1].
	prune = true
	# If true, fetch will automatically behave as if the refs/tags/*:refs/tags/*
	# refspec was provided when pruning, if not set already. This allows for
	# setting both this option and fetch.prune to maintain a 1=1 mapping to
	# upstream refs. See also remote.<name>.pruneTags and the PRUNING section of
	# git-fetch[1].
	pruneTags = true
[filter "lfs"]
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
[filter "npmrc"]
	smudge = cat
	clean = "sed '/registry./d'"
[filter "gpg-agent"]
	# The command which is used to convert the content of a worktree file to a blob upon checkin. See
	# gitattributes[5] for details.
	#
	# Filter out pinentry program on WSL 2 on windows in VS Code
	smudge = cat
	clean = "sed '/pinentry./d'"
[filter "spotify-tui"]
	smudge = cat
	clean = "sed '/^client_secret/d;/device_id/d'"
[filter "streamlink-crunchyroll"]
	smudge = cat
	clean = "sed '/^crunchyroll-password=/d'"
[filter "i3status-rust-token"]
	smudge = cat
	clean = "sed '/^token/d'"
[filter "xresources-dpi"]
	smudge = cat
	clean = "sed '/^Xft.dpi/d'"
[help]
	# Automatically correct and execute mistyped commands.
	autocorrect = 0
[init]
	# Allows overriding the default branch name e.g. when initializing a new
	# repository.
	defaultBranch = main
	# Specify the directory from which templates will be copied. (See the
	# "TEMPLATE DIRECTORY" section of git-init[1].)
	templatedir = ~/templates/git
[log]
	abbrevCommit = true
	date = iso
	follow = true
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	# Controls which merge tool is used by git-mergetool[1]. The list below shows
	# the valid built-in values. Any other value is treated as a custom merge
	# tool and requires that a corresponding mergetool.<tool>.cmd variable is
	# defined.
	tool = vimdiff
	# Specify the style in which conflicted hunks are written out to working tree
	# files upon merge. The default is "merge", which shows a <<<<<<< conflict
	# marker, changes made by one side, a ======= marker, changes made by the
	# other side, and then a >>>>>>> marker. An alternate style, "diff3", adds a
	# ||||||| marker and the original text before the ======= marker. The "merge"
	# style tends to produce smaller conflict regions than diff3, both because of
	# the exclusion of the original text, and because when a subset of lines
	# match on the two sides they are just pulled out of the conflict region.
	# Another alternate style, "zdiff3", is similar to diff3 but removes matching
	# lines on the two sides from the conflict region when those matching lines
	# appear near either the beginning or end of a conflict region.
	conflictstyle = diff3
	ff = only
	strategy = ort
	renormalize = true
[mergetool "vscode"]
	# Specify the command to invoke the specified merge tool. The specified
	# command is evaluated in shell with the following variables available: BASE
	# is the name of a temporary file containing the common base of the files to
	# be merged, if available; LOCAL is the name of a temporary file containing
	# the contents of the file on the current branch; REMOTE is the name of a
	# temporary file containing the contents of the file from the branch being
	# merged; MERGED contains the name of the file to which the merge tool should
	# write the results of a successful merge.
	cmd = code --wait $MERGED
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = current
	autoSetupRemote = true
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
	# Make sure all submodule commits used by the revisions to be pushed are
	# available on a remote-tracking branch. If the value is check then Git will
	# verify that all submodule commits that changed in the revisions to be
	# pushed are available on at least one remote of the submodule. If any
	# commits are missing, the push will be aborted and exit with non-zero
	# status. If the value is on-demand then all submodules that changed in the
	# revisions to be pushed will be pushed. If on-demand was not able to push
	# all necessary revisions it will also be aborted and exit with non-zero
	# status. If the value is no then default behavior of ignoring submodules
	# when pushing is retained. You may override this configuration at time of
	# push by specifying --recurse-submodules=check|on-demand|no. If not set, no
	# is used by default, unless submodule.recurse is set (in which case a true
	# value means on-demand).
	recurseSubmodules = check
[status]
	showStash = true
[url "git@github.com:"]
	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
	insteadOf = "github:"
[url "git@gist.github.com:"]
	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
	insteadOf = "gist:"
[gpg]
	# Use this custom program instead of "gpg" found on $PATH when making or
	# verifying a PGP signature. The program must support the same command-line
	# interface as GPG, namely, to verify a detached signature, "gpg --verify
	# $signature - <$file" is run, and the program is expected to signal a good
	# signature by exiting with code 0, and to generate an ASCII-armored detached
	# signature, the standard input of "gpg -bsau $key" is fed with the contents
	# to be signed, and the program is expected to send the result to its
	# standard output.
	program = gpg
[pull]
	# When true, rebase branches on top of the fetched branch, instead of merging
	# the default branch from the default remote when "git pull" is run. See
	# "branch.<name>.rebase" for setting this on a per-branch basis.
	#
	# When merges (or just m), pass the --rebase-merges option to git rebase so
	# that the local merge commits are included in the rebase (see git-rebase[1]
	# for details).
	#
	# When the value is interactive (or just i), the rebase is run in interactive
	# mode.
	#
	# NOTE: this is a possibly dangerous operation; do not use it unless you
	# understand the implications (see git-rebase[1] for details).
	rebase = true
[submodule]
	# A boolean indicating if commands should enable the --recurse-submodules
	# option by default. Applies to all commands that support this option
	# (checkout, fetch, grep, pull, push, read-tree, reset, restore and switch)
	# except clone and ls-files. Defaults to false. When set to true, it can be
	# deactivated via the --no-recurse-submodules option. Note that some Git
	# commands lacking this option may call some of the above commands affected
	# by submodule.recurse; for instance git remote update will call git fetch
	# but does not have a --no-recurse-submodules option. For these commands a
	# workaround is to temporarily change the configuration value by using git -c
	# submodule.recurse=0.
	recurse = true
[pack]
	# When true, git will write a corresponding .rev file (see:
	# Documentation/technical/pack-format.txt) for each new packfile that it
	# writes in all places except for git-fast-import[1] and in the bulk checkin
	# mechanism. Defaults to false.
	writeReverseIndex = true
[maintenance]
	# This string config option provides a way to specify one of a few
	# recommended schedules for background maintenance. This only affects which
	# tasks are run during git maintenance run --schedule=X commands, provided no
	# --task=<task> arguments are provided. Further, if a
	# maintenance.<task>.schedule config value is set, then that value is used
	# instead of the one provided by maintenance.strategy. The possible strategy
	# strings are:
	#
	# - none: This default setting implies no task are run at any schedule.
	#
	# - incremental: This setting optimizes for performing small maintenance
	# activities that do not delete any data. This does not schedule the gc
	# task, but runs the prefetch and commit-graph tasks hourly, the
	# loose-objects and incremental-repack tasks daily, and the pack-refs task
	# weekly.
	strategy = incremental
[grep]
	# If set to true, enable -n option by default.
	lineNumber = true
	# If set to true, enable the --column option by default.
	column = true
[tag]
	# A boolean to specify whether annotated tags created should be GPG signed.
	# If --annotate is specified on the command line, it takes precedence over
	# this option.
	forceSignAnnotated = true
	# A boolean to specify whether all tags should be GPG signed. Use of this
	# option when running in an automated script can result in a large number of
	# tags being signed. It is therefore convenient to use an agent to avoid
	# typing your gpg passphrase several times. Note that this option doesn't
	# affect tag signing behavior enabled by "-u <keyid>" or
	# "--local-user=<keyid>" options.
	gpgsign = true
[advice]
	# Advice shown if a user attempts to add an ignored file to the index.
	addIgnoredFile = false
	addEmptyPathspec = false
	statusHints = false
[credential]
	# Specify an external helper to be called when a username or password
	# credential is needed; the helper may consult external storage to avoid
	# prompting the user for the credentials. This is normally the name of a
	# credential helper with possible arguments, but may also be an absolute path
	# with arguments or, if preceded by !, shell commands.
	#
	# Note that multiple helpers may be defined. See gitcredentials[7] for
	# details and examples.
	helper = cache
[ghq]
	# The path to directory under which cloned repositories are placed. See
	# DIRECTORY STRUCTURES below. Defaults to ~/ghq.
	#
	# This variable can have multiple values. If so, the last one becomes primary
	# one i.e. new repository clones are always created under it. You may want to
	# specify "$GOPATH/src" as a secondary root (environment variables should be
	# expanded.)
	root = ~/git
[column]
	branch = auto
[color "grep"]
	match = green bold reverse
	column = white
[color "status"]
	changed = green
	added = yellow
	untracked = cyan
[feature]
	manyFiles = true
[add.interactive]
	useBuiltin = false
[rerere]
	enabled = true
	autoupdate = true
[rebase]
	stat = true
	autosquash = true
	missingCommitsCheck = error
	abbreviateCommands = true
	autoStash = true
