#!/usr/bin/env bash
#
# Fuzzy finds folders to open tmux sessions in. Makes it easy to switch between
# projects with their own individual tmux sessions. Give it a keybinding in a
# shell to streamline its use.
#
# Inspired by ThePrimeagen.

# Unofficial 'strict mode'.
set -euo pipefail

# TODO: Recursively find project directories under ~/src/git*`.

# Machine specific project directories. e.g., exported in
# `$XDG_CONFIG_HOME/shell/extra`.
# Source: https://stackoverflow.com/a/45201229
# shellcheck disable=2153
readarray -td ':' proj_dirs < <(awk '{ gsub(/, /,"\0"); print; }' <<<"$PROJ_DIRS: ")
unset 'proj_dirs[-1]'
proj_dirs+=(
	# e.g., neovim configs.
	"$XDG_CONFIG_HOME"
	# Local projects not tracked by git.
	~/src/localhost
)

if [[ $# -eq 1 ]]; then
	selected=$(realpath --no-symlinks "$1")
else
	selected=$(find "${proj_dirs[@]}" -mindepth 1 -maxdepth 1 -type d | fzf)
fi

if [[ -z $selected ]]; then
	exit 0
fi

selected_name=$(basename "$selected" | tr . _)
tmux_running=$(pgrep tmux || true)

# If tmux is not running, create a new session first.
if [[ -z $tmux_running ]]; then
	tmux new-session -s "$selected_name" -c "$selected"
	exit 0
fi

# If there is at least a tmux server running and if you're not inside tmux, then
# either attach to the session or create it:
if [[ -z "${TMUX:-}" ]]; then
	tmux new-session -A -s "$selected_name" -c "$selected"
	exit 0
fi

# If we're in tmux and the session doesn't exist, create it before switching to
# it.
if ! tmux has-session -t="$selected_name" 2>/dev/null; then
	tmux new-session -ds "$selected_name" -c "$selected"
fi

tmux switch-client -t "$selected_name"
