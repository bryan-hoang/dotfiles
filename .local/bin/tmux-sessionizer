#!/usr/bin/env bash
#
# Fuzzy finds folders to open tmux sessions in. Makes it easy to switch between
# projects with their own individual tmux sessions. Give it a keybinding in a
# shell to streamline its use.
#
# Inspired by ThePrimeagen's dotfiles.

# Unofficial 'strict mode'.
set -euo pipefail

while getopts 'd' option; do
	case "$option" in
		d)
			# Print what directories will be searched.
			debug='true'
			;;
		*)
			exit 1
			;;
	esac
done

shift $((OPTIND - 1))

# List of project directories that we want to make a session in tmux for.
declare -a proj_dirs=(
	# e.g., neovim configs.
	"$XDG_CONFIG_HOME"
	# Local projects not tracked by git.
	~/src/localhost
)

# Find git projects, e.g., `~/src/github.com/foo-bar/`
mapfile -t -O "${#proj_dirs[@]}" proj_dirs < <(
	fd --type d --exact-depth 2 --search-path ~/src --exclude localhost
)

# Read `PROJ_DIRS` for machine specific project directories. e.g., `/mnt/...`
# Converting `:` delimited string into an array:
# https://stackoverflow.com/a/45201229
# shellcheck disable=2153
readarray -t -d ':' -O "${#proj_dirs[@]}" proj_dirs < <(
	awk '{ gsub(/, /,"\0"); print; }' <<<"$PROJ_DIRS: "
)
unset 'proj_dirs[-1]'

if [[ -n ${debug:-} ]]; then
	echo 'Directories to search:'
	printf '%s\n' "${proj_dirs[@]}"
	exit
fi

if [[ $# -eq 1 ]]; then
	selected=$(realpath --no-symlinks "$1")
else
	selected=$(find "${proj_dirs[@]}" -mindepth 1 -maxdepth 1 -type d | fzf)
fi

if [[ -z $selected ]]; then
	exit 0
fi

selected_name=$(basename "$selected" | tr . _)
tmux_running=$(pgrep tmux || true)

# If tmux is not running, create a new session first.
if [[ -z $tmux_running ]]; then
	tmux new-session -s "$selected_name" -c "$selected"
	exit 0
fi

# If there is at least a tmux server running and if you're not inside tmux, then
# either attach to the session or create it:
if [[ -z "${TMUX:-}" ]]; then
	tmux new-session -A -s "$selected_name" -c "$selected"
	exit 0
fi

# If we're in tmux and the session doesn't exist, create it before switching to
# it.
if ! tmux has-session -t="$selected_name" 2>/dev/null; then
	tmux new-session -ds "$selected_name" -c "$selected"
fi

# We're in tmux and can switch to an existing session.
tmux switch-client -t "$selected_name"
