#!/usr/bin/env bash
#
# Sessionizes a directory inside a terminal multiplexer.
#
# Makes it easy to switch between projects with their own individual multiplexer
# sessions. Give it a keybinding in a shell to streamline its use.
#
# Usage: ssnz [-d] [path]
#
# Inspired by ThePrimeagen's dotfiles.

set -euo pipefail

declare debug
while getopts 'd' option; do
	case "$option" in
		d)
			# Print what directories will be searched.
			debug='true'
			;;
		*)
			return 1
			;;
	esac
done

readonly debug

shift $((OPTIND - 1))

# List of project directories that we want to make a session in tmux for.
declare -a proj_dirs=(
	# e.g., neovim configs.
	"$XDG_CONFIG_HOME"
	# Local projects not tracked by git.
	"$HOME"/src/localhost
)

# Find git projects, e.g., `$HOME/src/github.com/foo-bar/` Arbitrarily search for
# grandparents of `.git/` directories.
while IFS='' read -r line; do proj_dirs+=("$line"); done < <(
	fd --search-path="$HOME"/src --exclude=localhost --min-depth=4 --max-depth=4 \
		--no-ignore --hidden '^\.git$' \
		| while IFS= read -r git_dir; do
			parent_dir=$(dirname "$git_dir")
			grandparent_dir=$(dirname "$parent_dir")
			echo "$grandparent_dir"
		done | huniq
)

# Read `PROJ_DIRS` for machine specific project directories. e.g., `/mnt/...`
# Converting `:` delimited string into an array:
# https://stackoverflow.com/a/45201229
# shellcheck disable=2153
if [[ -n ${PROJ_DIRS-} ]]; then
	readarray -t -d ':' -O "${#proj_dirs[@]}" proj_dirs < <(
		awk '{ gsub(/, /,"\0"); print; }' <<<"$PROJ_DIRS: "
	)

	unset 'proj_dirs[-1]'
fi

readonly proj_dirs

found_dirs="$(fd --type directory --exact-depth 1 --hidden . "${proj_dirs[@]}")"

readonly found_dirs

if [[ -n ${debug-} ]]; then
	echo 'Project directories:'
	printf '%s\n' "${proj_dirs[@]}"
	echo 'Found directories:'
	echo "$found_dirs"
	exit
fi

declare session_cwd

if [[ $# == 1 ]]; then
	session_cwd=$(realpath "$1")/
else
	# Conditionally add the cwd to the project list if it isn't already present.
	cwd=$PWD/
	readonly cwd
	session_cwd=$(
		echo "$found_dirs" \
			| if [[ ${proj_dirs[*]} =~ $cwd ]]; then cat - <(echo "$cwd"); else cat; fi \
			| sort --reverse \
			| tv --preview-command 'lsd --group-directories-first {0}'
	)
fi

readonly session_cwd

if [[ -z $session_cwd ]]; then
	exit 0
fi

declare session_name
session_name=$(basename "$session_cwd" | sed 's/\./_/g')
readonly session_name

multiplex_tmux() {
	# Ensure the session exists before switching to it. Need to specify `=` for
	# exact matching rather than prefix matching.
	if ! tmux has-session -t="$session_name" 2>/dev/null; then
		tmux new-session -c "$session_cwd" -s "$session_name" -d
	fi

	if [[ -z ${TMUX-} ]]; then
		tmux attach-session -c "$session_cwd" -t "$session_name"
	else
		tmux switch-client -t "$session_name"
	fi
}

multiplex_zellij() {
	if [[ -z ${ZELLIJ-} ]]; then
		zellij attach --create "$session_name" options --default-cwd="$session_cwd"
	else
		zellij pipe \
			--plugin https://github.com/mostafaqanbaryan/zellij-switch/releases/download/v0.1.1/zellij-switch.wasm \
			-- "$session_name::$session_cwd"
	fi
}

multiplex_"${MULTIPLEXER:-tmux}"
